{"id":"768cd6e4-0513-4f74-9cb1-d1a001cf5406","data":{"nodes":[{"id":"OpenAIModel-YA8gL","type":"genericNode","position":{"x":1114.6437736076462,"y":1604.406986006208},"data":{"type":"OpenAIModel","node":{"template":{"_type":"Component","api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"api_key","display_name":"OpenAI API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import operator\nfrom functools import reduce\n\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"json_mode","display_name":"JSON Mode","advanced":true,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool","_input_type":"BoolInput"},"max_tokens":{"trace_as_metadata":true,"range_spec":{"step_type":"float","min":0,"max":128000,"step":0.1},"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"max_tokens","display_name":"Max Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int","_input_type":"IntInput"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict","_input_type":"DictInput"},"model_name":{"trace_as_metadata":true,"options":["gpt-4o-mini","gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"combobox":false,"required":false,"placeholder":"","show":true,"value":"gpt-3.5-turbo-0125","name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput"},"openai_api_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":false,"type":"str","_input_type":"StrInput"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"output_schema","display_name":"Schema","advanced":true,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict","_input_type":"DictInput"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"1","name":"seed","display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int","_input_type":"IntInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"system_message","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":0.1,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput"}},"description":"Researcher LLM","icon":"OpenAI","base_classes":["LanguageModel","Message"],"display_name":"OpenAI","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value","system_message","stream","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","api_key","temperature","seed"],"beta":false,"edited":false},"id":"OpenAIModel-YA8gL"},"selected":false,"width":384,"height":639,"dragging":false,"positionAbsolute":{"x":1114.6437736076462,"y":1604.406986006208}},{"id":"CrewAIAgentComponent-oDvyH","type":"genericNode","position":{"x":1921.4813912148322,"y":1097.375883552401},"data":{"type":"CrewAIAgentComponent","node":{"template":{"_type":"Component","llm":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"llm","display_name":"Language Model","advanced":false,"input_types":["LanguageModel"],"dynamic":false,"info":"Language model that will run the agent.","title_case":false,"type":"other","_input_type":"HandleInput"},"tools":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":[],"name":"tools","display_name":"Tools","advanced":false,"input_types":["Tool"],"dynamic":false,"info":"Tools at agents disposal","title_case":false,"type":"other","_input_type":"HandleInput"},"allow_code_execution":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"allow_code_execution","display_name":"Allow Code Execution","advanced":true,"dynamic":false,"info":"Whether the agent is allowed to execute code.","title_case":false,"type":"bool","_input_type":"BoolInput"},"allow_delegation":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"allow_delegation","display_name":"Allow Delegation","advanced":false,"dynamic":false,"info":"Whether the agent is allowed to delegate tasks to other agents.","title_case":false,"type":"bool","_input_type":"BoolInput"},"backstory":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"backstory","display_name":"Backstory","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The backstory of the agent.","title_case":false,"type":"str","_input_type":"MultilineInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from crewai import Agent  # type: ignore\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"goal":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"goal","display_name":"Goal","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The objective of the agent.","title_case":false,"type":"str","_input_type":"MultilineInput"},"kwargs":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"kwargs","display_name":"kwargs","advanced":true,"dynamic":false,"info":"kwargs of agent.","title_case":false,"type":"dict","_input_type":"DictInput"},"memory":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"memory","display_name":"Memory","advanced":true,"dynamic":false,"info":"Whether the agent should have memory or not","title_case":false,"type":"bool","_input_type":"BoolInput"},"role":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"Senior AI Researcher","name":"role","display_name":"Role","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The role of the agent.","title_case":false,"type":"str","_input_type":"MultilineInput"},"verbose":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"verbose","display_name":"Verbose","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Researcher","icon":"CrewAI","base_classes":["Agent"],"display_name":"CrewAI Agent","documentation":"https://docs.crewai.com/how-to/LLM-Connections/","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Agent"],"selected":"Agent","name":"output","display_name":"Agent","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["role","goal","backstory","tools","llm","memory","verbose","allow_delegation","allow_code_execution","kwargs"],"beta":false,"edited":false},"id":"CrewAIAgentComponent-oDvyH"},"selected":false,"width":384,"height":685,"positionAbsolute":{"x":1921.4813912148322,"y":1097.375883552401},"dragging":false},{"id":"CrewAIAgentComponent-TOVHx","type":"genericNode","position":{"x":2516.980138504732,"y":1113.7048101088192},"data":{"type":"CrewAIAgentComponent","node":{"template":{"_type":"Component","llm":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"llm","display_name":"Language Model","advanced":false,"input_types":["LanguageModel"],"dynamic":false,"info":"Language model that will run the agent.","title_case":false,"type":"other","_input_type":"HandleInput"},"tools":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":[],"name":"tools","display_name":"Tools","advanced":false,"input_types":["Tool"],"dynamic":false,"info":"Tools at agents disposal","title_case":false,"type":"other","_input_type":"HandleInput"},"allow_code_execution":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"allow_code_execution","display_name":"Allow Code Execution","advanced":true,"dynamic":false,"info":"Whether the agent is allowed to execute code.","title_case":false,"type":"bool","_input_type":"BoolInput"},"allow_delegation":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"allow_delegation","display_name":"Allow Delegation","advanced":false,"dynamic":false,"info":"Whether the agent is allowed to delegate tasks to other agents.","title_case":false,"type":"bool","_input_type":"BoolInput"},"backstory":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"You are a deeply experienced in writing the research blogs, who has written countless blogs in the field of AI.","name":"backstory","display_name":"Backstory","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The backstory of the agent.","title_case":false,"type":"str","_input_type":"MultilineInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from crewai import Agent  # type: ignore\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"goal":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"Write a blog on the provided research","name":"goal","display_name":"Goal","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The objective of the agent.","title_case":false,"type":"str","_input_type":"MultilineInput"},"kwargs":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"kwargs","display_name":"kwargs","advanced":true,"dynamic":false,"info":"kwargs of agent.","title_case":false,"type":"dict","_input_type":"DictInput"},"memory":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"memory","display_name":"Memory","advanced":true,"dynamic":false,"info":"Whether the agent should have memory or not","title_case":false,"type":"bool","_input_type":"BoolInput"},"role":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"Senior Research Blog writer","name":"role","display_name":"Role","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The role of the agent.","title_case":false,"type":"str","_input_type":"MultilineInput"},"verbose":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"verbose","display_name":"Verbose","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Represents an agent of CrewAI.","icon":"CrewAI","base_classes":["Agent"],"display_name":"CrewAI Agent","documentation":"https://docs.crewai.com/how-to/LLM-Connections/","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Agent"],"selected":"Agent","name":"output","display_name":"Agent","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["role","goal","backstory","tools","llm","memory","verbose","allow_delegation","allow_code_execution","kwargs"],"beta":false,"edited":false},"id":"CrewAIAgentComponent-TOVHx"},"selected":false,"width":384,"height":685,"positionAbsolute":{"x":2516.980138504732,"y":1113.7048101088192},"dragging":false},{"id":"SequentialTaskComponent-Xdoiu","type":"genericNode","position":{"x":2515.880996645675,"y":393.20620939731566},"data":{"type":"SequentialTaskComponent","node":{"template":{"_type":"Component","agent":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"agent","display_name":"Agent","advanced":false,"input_types":["Agent"],"dynamic":false,"info":"CrewAI Agent that will perform the task","title_case":false,"type":"other","_input_type":"HandleInput"},"task":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"task","display_name":"Task","advanced":false,"input_types":["SequentialTask"],"dynamic":false,"info":"CrewAI Task that will perform the task","title_case":false,"type":"other","_input_type":"HandleInput"},"tools":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"tools","display_name":"Tools","advanced":true,"input_types":["Tool"],"dynamic":false,"info":"List of tools/resources limited for task execution. Uses the Agent tools by default.","title_case":false,"type":"other","_input_type":"HandleInput"},"async_execution":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"async_execution","display_name":"Async Execution","advanced":true,"dynamic":false,"info":"Boolean flag indicating asynchronous task execution.","title_case":false,"type":"bool","_input_type":"BoolInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.agents.crewai.tasks import SequentialTask\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, HandleInput, MultilineInput, Output\n\n\nclass SequentialTaskComponent(Component):\n    display_name: str = \"Sequential Task\"\n    description: str = \"Each task must have a description, an expected output and an agent responsible for execution.\"\n    icon = \"CrewAI\"\n    inputs = [\n        MultilineInput(\n            name=\"task_description\",\n            display_name=\"Description\",\n            info=\"Descriptive text detailing task's purpose and execution.\",\n        ),\n        MultilineInput(\n            name=\"expected_output\",\n            display_name=\"Expected Output\",\n            info=\"Clear definition of expected task outcome.\",\n        ),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"List of tools/resources limited for task execution. Uses the Agent tools by default.\",\n            required=False,\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"agent\",\n            display_name=\"Agent\",\n            input_types=[\"Agent\"],\n            info=\"CrewAI Agent that will perform the task\",\n            required=True,\n        ),\n        HandleInput(\n            name=\"task\",\n            display_name=\"Task\",\n            input_types=[\"SequentialTask\"],\n            info=\"CrewAI Task that will perform the task\",\n        ),\n        BoolInput(\n            name=\"async_execution\",\n            display_name=\"Async Execution\",\n            value=True,\n            advanced=True,\n            info=\"Boolean flag indicating asynchronous task execution.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Task\", name=\"task_output\", method=\"build_task\"),\n    ]\n\n    def build_task(self) -> list[SequentialTask]:\n        tasks: list[SequentialTask] = []\n        task = SequentialTask(\n            description=self.task_description,\n            expected_output=self.expected_output,\n            tools=self.agent.tools,\n            async_execution=False,\n            agent=self.agent,\n        )\n        tasks.append(task)\n        self.status = task\n        if self.task:\n            if isinstance(self.task, list) and all(isinstance(task, SequentialTask) for task in self.task):\n                tasks = self.task + tasks\n            elif isinstance(self.task, SequentialTask):\n                tasks = [self.task] + tasks\n        return tasks\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"expected_output":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":" A detailed bullet point summary on each of the research example. Each bullet point should cover the topic, background and why the innovation is useful.","name":"expected_output","display_name":"Expected Output","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Clear definition of expected task outcome.","title_case":false,"type":"str","_input_type":"MultilineInput"},"task_description":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"task_description","display_name":"Description","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Descriptive text detailing task's purpose and execution.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Each task must have a description, an expected output and an agent responsible for execution.","icon":"CrewAI","base_classes":["SequentialTask"],"display_name":"Sequential Task","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["SequentialTask"],"selected":"SequentialTask","name":"task_output","display_name":"Task","method":"build_task","value":"__UNDEFINED__","cache":true}],"field_order":["task_description","expected_output","tools","agent","task","async_execution"],"beta":false,"edited":false},"id":"SequentialTaskComponent-Xdoiu"},"selected":false,"width":384,"height":575,"positionAbsolute":{"x":2515.880996645675,"y":393.20620939731566},"dragging":true},{"id":"TextInput-Mx54l","type":"genericNode","position":{"x":881.1004820402466,"y":268.13569645745457},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"generative ai","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Sub Field","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-Mx54l"},"selected":false,"width":384,"height":317,"dragging":false,"positionAbsolute":{"x":881.1004820402466,"y":268.13569645745457}},{"id":"Prompt-z3qNv","type":"genericNode","position":{"x":1487.6048398028117,"y":427.81811703982476},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"find promising research in the field of {sub_field}.","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput"},"sub_field":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"sub_field","display_name":"sub_field","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["sub_field"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-z3qNv"},"selected":false,"width":384,"height":431,"positionAbsolute":{"x":1487.6048398028117,"y":427.81811703982476},"dragging":false},{"id":"Prompt-psfcc","type":"genericNode","position":{"x":1059.0700589865544,"y":761.6988496536248},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"You're a leading AI researcher specializing in {sub_field}. Driven by curiosity and a commitment to ethical AI, you're dedicated to pushing the boundaries of creativity and innovation, aiming to unlock {sub_field}'s full potential.","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput"},"sub_field":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"sub_field","display_name":"sub_field","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["sub_field"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-psfcc"},"selected":false,"width":384,"height":431,"positionAbsolute":{"x":1059.0700589865544,"y":761.6988496536248},"dragging":false},{"id":"SequentialTaskComponent-Q2LSj","type":"genericNode","position":{"x":3042.690839340271,"y":388.57351513660865},"data":{"type":"SequentialTaskComponent","node":{"template":{"_type":"Component","agent":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"agent","display_name":"Agent","advanced":false,"input_types":["Agent"],"dynamic":false,"info":"CrewAI Agent that will perform the task","title_case":false,"type":"other","_input_type":"HandleInput"},"task":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"task","display_name":"Task","advanced":false,"input_types":["SequentialTask"],"dynamic":false,"info":"CrewAI Task that will perform the task","title_case":false,"type":"other","_input_type":"HandleInput"},"tools":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"tools","display_name":"Tools","advanced":true,"input_types":["Tool"],"dynamic":false,"info":"List of tools/resources limited for task execution. Uses the Agent tools by default.","title_case":false,"type":"other","_input_type":"HandleInput"},"async_execution":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"async_execution","display_name":"Async Execution","advanced":true,"dynamic":false,"info":"Boolean flag indicating asynchronous task execution.","title_case":false,"type":"bool","_input_type":"BoolInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.agents.crewai.tasks import SequentialTask\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, HandleInput, MultilineInput, Output\n\n\nclass SequentialTaskComponent(Component):\n    display_name: str = \"Sequential Task\"\n    description: str = \"Each task must have a description, an expected output and an agent responsible for execution.\"\n    icon = \"CrewAI\"\n    inputs = [\n        MultilineInput(\n            name=\"task_description\",\n            display_name=\"Description\",\n            info=\"Descriptive text detailing task's purpose and execution.\",\n        ),\n        MultilineInput(\n            name=\"expected_output\",\n            display_name=\"Expected Output\",\n            info=\"Clear definition of expected task outcome.\",\n        ),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"List of tools/resources limited for task execution. Uses the Agent tools by default.\",\n            required=False,\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"agent\",\n            display_name=\"Agent\",\n            input_types=[\"Agent\"],\n            info=\"CrewAI Agent that will perform the task\",\n            required=True,\n        ),\n        HandleInput(\n            name=\"task\",\n            display_name=\"Task\",\n            input_types=[\"SequentialTask\"],\n            info=\"CrewAI Task that will perform the task\",\n        ),\n        BoolInput(\n            name=\"async_execution\",\n            display_name=\"Async Execution\",\n            value=True,\n            advanced=True,\n            info=\"Boolean flag indicating asynchronous task execution.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Task\", name=\"task_output\", method=\"build_task\"),\n    ]\n\n    def build_task(self) -> list[SequentialTask]:\n        tasks: list[SequentialTask] = []\n        task = SequentialTask(\n            description=self.task_description,\n            expected_output=self.expected_output,\n            tools=self.agent.tools,\n            async_execution=False,\n            agent=self.agent,\n        )\n        tasks.append(task)\n        self.status = task\n        if self.task:\n            if isinstance(self.task, list) and all(isinstance(task, SequentialTask) for task in self.task):\n                tasks = self.task + tasks\n            elif isinstance(self.task, SequentialTask):\n                tasks = [self.task] + tasks\n        return tasks\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"expected_output":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"A engaging blog.","name":"expected_output","display_name":"Expected Output","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Clear definition of expected task outcome.","title_case":false,"type":"str","_input_type":"MultilineInput"},"task_description":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"Write a blog based on the from provided research summary on the articles.","name":"task_description","display_name":"Description","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Descriptive text detailing task's purpose and execution.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Each task must have a description, an expected output and an agent responsible for execution.","icon":"CrewAI","base_classes":["SequentialTask"],"display_name":"Sequential Task","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["SequentialTask"],"selected":"SequentialTask","name":"task_output","display_name":"Task","method":"build_task","value":"__UNDEFINED__","cache":true}],"field_order":["task_description","expected_output","tools","agent","task","async_execution"],"beta":false,"edited":false},"id":"SequentialTaskComponent-Q2LSj"},"selected":false,"width":384,"height":575,"positionAbsolute":{"x":3042.690839340271,"y":388.57351513660865},"dragging":false},{"id":"SequentialCrewComponent-BoVzP","type":"genericNode","position":{"x":3134.900567935421,"y":1224.2916901982958},"data":{"type":"SequentialCrewComponent","node":{"template":{"_type":"Component","function_calling_llm":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"function_calling_llm","display_name":"Function Calling LLM","advanced":true,"input_types":["LanguageModel"],"dynamic":false,"info":"Turns the ReAct CrewAI agent into a function-calling agent","title_case":false,"type":"other","_input_type":"HandleInput"},"tasks":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"tasks","display_name":"Tasks","advanced":false,"input_types":["SequentialTask"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from crewai import Agent, Crew, Process, Task  # type: ignore\n\nfrom langflow.base.agents.crewai.crew import BaseCrewComponent\nfrom langflow.io import HandleInput\nfrom langflow.schema.message import Message\n\n\nclass SequentialCrewComponent(BaseCrewComponent):\n    display_name: str = \"Sequential Crew\"\n    description: str = \"Represents a group of agents with tasks that are executed sequentially.\"\n    documentation: str = \"https://docs.crewai.com/how-to/Sequential/\"\n    icon = \"CrewAI\"\n\n    inputs = BaseCrewComponent._base_inputs + [\n        HandleInput(name=\"tasks\", display_name=\"Tasks\", input_types=[\"SequentialTask\"], is_list=True),\n    ]\n\n    def get_tasks_and_agents(self) -> tuple[list[Task], list[Agent]]:\n        return self.tasks, [task.agent for task in self.tasks]\n\n    def build_crew(self) -> Message:\n        tasks, agents = self.get_tasks_and_agents()\n        crew = Crew(\n            agents=agents,\n            tasks=tasks,\n            process=Process.sequential,\n            verbose=self.verbose,\n            memory=self.memory,\n            cache=self.use_cache,\n            max_rpm=self.max_rpm,\n            share_crew=self.share_crew,\n            function_calling_llm=self.function_calling_llm,\n            step_callback=self.get_step_callback(),\n            task_callback=self.get_task_callback(),\n        )\n        return crew\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"max_rpm":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"100","name":"max_rpm","display_name":"Max RPM","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"memory":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"memory","display_name":"Memory","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"share_crew":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"share_crew","display_name":"Share Crew","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"use_cache":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"use_cache","display_name":"Cache","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"verbose":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"0","name":"verbose","display_name":"Verbose","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"}},"description":"Represents a group of agents with tasks that are executed sequentially.","icon":"CrewAI","base_classes":["Message"],"display_name":"Sequential Crew","documentation":"https://docs.crewai.com/how-to/Sequential/","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"output","display_name":"Output","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["verbose","memory","use_cache","max_rpm","share_crew","function_calling_llm","tasks"],"beta":false,"edited":false},"id":"SequentialCrewComponent-BoVzP"},"selected":false,"width":384,"height":303,"positionAbsolute":{"x":3134.900567935421,"y":1224.2916901982958},"dragging":false},{"id":"Prompt-PbvBa","type":"genericNode","position":{"x":1974.9064605938806,"y":229.77357856730998},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"Search the google and find 5 promising AI research examples in the {sub_field}.","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput"},"sub_field":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"sub_field","display_name":"sub_field","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["sub_field"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-PbvBa"},"selected":false,"width":384,"height":431,"positionAbsolute":{"x":1974.9064605938806,"y":229.77357856730998},"dragging":false},{"id":"ChatOutput-hn1we","type":"genericNode","position":{"x":3596.0106732873787,"y":1210.1705284551708},"data":{"type":"ChatOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"data_template","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"combobox":false,"required":false,"placeholder":"","show":true,"value":"Machine","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"AI","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"should_store_message","display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Display a chat message in the Playground.","icon":"ChatOutput","base_classes":["Message"],"display_name":"Chat Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","data_template"],"beta":false,"edited":false},"id":"ChatOutput-hn1we"},"selected":false,"width":384,"height":317,"positionAbsolute":{"x":3596.0106732873787,"y":1210.1705284551708},"dragging":false},{"id":"SerpAPI-2J1pe","type":"genericNode","position":{"x":630.9538518659562,"y":1150.3495233636102},"data":{"type":"SerpAPI","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_community.utilities.serpapi import SerpAPIWrapper\n\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import SecretStrInput, DictInput, MultilineInput\nfrom langflow.schema import Data\nfrom langflow.field_typing import Tool\n\n\nclass SerpAPIComponent(LCToolComponent):\n    display_name = \"Serp Search API\"\n    description = \"Call Serp Search API\"\n    name = \"SerpAPI\"\n\n    inputs = [\n        SecretStrInput(name=\"serpapi_api_key\", display_name=\"SerpAPI API Key\", required=True),\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n        ),\n        DictInput(name=\"search_params\", display_name=\"Parameters\", advanced=True, is_list=True),\n    ]\n\n    def run_model(self) -> list[Data]:\n        wrapper = self._build_wrapper()\n        results = wrapper.results(self.input_value)\n        list_results = results.get(\"organic_results\", [])\n        data = [Data(data=result, text=result[\"snippet\"]) for result in list_results]\n        self.status = data\n        return data\n\n    def build_tool(self) -> Tool:\n        wrapper = self._build_wrapper()\n        return Tool(name=\"search_api\", description=\"Search for recent results.\", func=wrapper.run)\n\n    def _build_wrapper(self) -> SerpAPIWrapper:\n        if self.search_params:\n            return SerpAPIWrapper(  # type: ignore\n                serpapi_api_key=self.serpapi_api_key,\n                params=self.search_params,\n            )\n        return SerpAPIWrapper(  # type: ignore\n            serpapi_api_key=self.serpapi_api_key\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MultilineInput"},"search_params":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":[{"":""}],"name":"search_params","display_name":"Parameters","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict","_input_type":"DictInput"},"serpapi_api_key":{"load_from_db":true,"required":true,"placeholder":"","show":true,"value":"","name":"serpapi_api_key","display_name":"SerpAPI API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"}},"description":"Call Serp Search API","base_classes":["Data","Tool"],"display_name":"Serp Search API","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true}],"field_order":["serpapi_api_key","input_value","search_params"],"beta":false,"edited":false},"id":"SerpAPI-2J1pe"},"selected":true,"width":384,"height":467,"dragging":false,"positionAbsolute":{"x":630.9538518659562,"y":1150.3495233636102}}],"edges":[{"source":"OpenAIModel-YA8gL","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YA8gLœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}","target":"CrewAIAgentComponent-oDvyH","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-oDvyHœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"llm","id":"CrewAIAgentComponent-oDvyH","inputTypes":["LanguageModel"],"type":"other"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-YA8gL","name":"model_output","output_types":["LanguageModel"]}},"id":"reactflow__edge-OpenAIModel-YA8gL{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YA8gLœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-oDvyH{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-oDvyHœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","className":"","selected":false},{"source":"CrewAIAgentComponent-oDvyH","sourceHandle":"{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-oDvyHœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}","target":"SequentialTaskComponent-Xdoiu","targetHandle":"{œfieldNameœ:œagentœ,œidœ:œSequentialTaskComponent-Xdoiuœ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"agent","id":"SequentialTaskComponent-Xdoiu","inputTypes":["Agent"],"type":"other"},"sourceHandle":{"dataType":"CrewAIAgentComponent","id":"CrewAIAgentComponent-oDvyH","name":"output","output_types":["Agent"]}},"id":"reactflow__edge-CrewAIAgentComponent-oDvyH{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-oDvyHœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-SequentialTaskComponent-Xdoiu{œfieldNameœ:œagentœ,œidœ:œSequentialTaskComponent-Xdoiuœ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}","className":""},{"source":"TextInput-Mx54l","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Mx54lœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-z3qNv","targetHandle":"{œfieldNameœ:œsub_fieldœ,œidœ:œPrompt-z3qNvœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"sub_field","id":"Prompt-z3qNv","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-Mx54l","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-Mx54l{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Mx54lœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-z3qNv{œfieldNameœ:œsub_fieldœ,œidœ:œPrompt-z3qNvœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"TextInput-Mx54l","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Mx54lœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-psfcc","targetHandle":"{œfieldNameœ:œsub_fieldœ,œidœ:œPrompt-psfccœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"sub_field","id":"Prompt-psfcc","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-Mx54l","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-Mx54l{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Mx54lœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-psfcc{œfieldNameœ:œsub_fieldœ,œidœ:œPrompt-psfccœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"SequentialCrewComponent-BoVzP","sourceHandle":"{œdataTypeœ:œSequentialCrewComponentœ,œidœ:œSequentialCrewComponent-BoVzPœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-hn1we","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-hn1weœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-hn1we","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"SequentialCrewComponent","id":"SequentialCrewComponent-BoVzP","name":"output","output_types":["Message"]}},"id":"reactflow__edge-SequentialCrewComponent-BoVzP{œdataTypeœ:œSequentialCrewComponentœ,œidœ:œSequentialCrewComponent-BoVzPœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-hn1we{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-hn1weœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"TextInput-Mx54l","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Mx54lœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-PbvBa","targetHandle":"{œfieldNameœ:œsub_fieldœ,œidœ:œPrompt-PbvBaœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"sub_field","id":"Prompt-PbvBa","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-Mx54l","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-Mx54l{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Mx54lœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-PbvBa{œfieldNameœ:œsub_fieldœ,œidœ:œPrompt-PbvBaœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"Prompt-psfcc","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-psfccœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"CrewAIAgentComponent-oDvyH","targetHandle":"{œfieldNameœ:œbackstoryœ,œidœ:œCrewAIAgentComponent-oDvyHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"backstory","id":"CrewAIAgentComponent-oDvyH","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-psfcc","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-psfcc{œdataTypeœ:œPromptœ,œidœ:œPrompt-psfccœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CrewAIAgentComponent-oDvyH{œfieldNameœ:œbackstoryœ,œidœ:œCrewAIAgentComponent-oDvyHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"Prompt-z3qNv","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-z3qNvœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"CrewAIAgentComponent-oDvyH","targetHandle":"{œfieldNameœ:œgoalœ,œidœ:œCrewAIAgentComponent-oDvyHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"goal","id":"CrewAIAgentComponent-oDvyH","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-z3qNv","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-z3qNv{œdataTypeœ:œPromptœ,œidœ:œPrompt-z3qNvœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CrewAIAgentComponent-oDvyH{œfieldNameœ:œgoalœ,œidœ:œCrewAIAgentComponent-oDvyHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"Prompt-PbvBa","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-PbvBaœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"SequentialTaskComponent-Xdoiu","targetHandle":"{œfieldNameœ:œtask_descriptionœ,œidœ:œSequentialTaskComponent-Xdoiuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"task_description","id":"SequentialTaskComponent-Xdoiu","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-PbvBa","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-PbvBa{œdataTypeœ:œPromptœ,œidœ:œPrompt-PbvBaœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-SequentialTaskComponent-Xdoiu{œfieldNameœ:œtask_descriptionœ,œidœ:œSequentialTaskComponent-Xdoiuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"OpenAIModel-YA8gL","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YA8gLœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}","target":"CrewAIAgentComponent-TOVHx","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-TOVHxœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"llm","id":"CrewAIAgentComponent-TOVHx","inputTypes":["LanguageModel"],"type":"other"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-YA8gL","name":"model_output","output_types":["LanguageModel"]}},"id":"reactflow__edge-OpenAIModel-YA8gL{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YA8gLœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-TOVHx{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-TOVHxœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","className":""},{"source":"CrewAIAgentComponent-TOVHx","sourceHandle":"{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-TOVHxœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}","target":"SequentialTaskComponent-Q2LSj","targetHandle":"{œfieldNameœ:œagentœ,œidœ:œSequentialTaskComponent-Q2LSjœ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"agent","id":"SequentialTaskComponent-Q2LSj","inputTypes":["Agent"],"type":"other"},"sourceHandle":{"dataType":"CrewAIAgentComponent","id":"CrewAIAgentComponent-TOVHx","name":"output","output_types":["Agent"]}},"id":"reactflow__edge-CrewAIAgentComponent-TOVHx{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-TOVHxœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-SequentialTaskComponent-Q2LSj{œfieldNameœ:œagentœ,œidœ:œSequentialTaskComponent-Q2LSjœ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}","className":""},{"source":"SequentialTaskComponent-Xdoiu","sourceHandle":"{œdataTypeœ:œSequentialTaskComponentœ,œidœ:œSequentialTaskComponent-Xdoiuœ,œnameœ:œtask_outputœ,œoutput_typesœ:[œSequentialTaskœ]}","target":"SequentialTaskComponent-Q2LSj","targetHandle":"{œfieldNameœ:œtaskœ,œidœ:œSequentialTaskComponent-Q2LSjœ,œinputTypesœ:[œSequentialTaskœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"task","id":"SequentialTaskComponent-Q2LSj","inputTypes":["SequentialTask"],"type":"other"},"sourceHandle":{"dataType":"SequentialTaskComponent","id":"SequentialTaskComponent-Xdoiu","name":"task_output","output_types":["SequentialTask"]}},"id":"reactflow__edge-SequentialTaskComponent-Xdoiu{œdataTypeœ:œSequentialTaskComponentœ,œidœ:œSequentialTaskComponent-Xdoiuœ,œnameœ:œtask_outputœ,œoutput_typesœ:[œSequentialTaskœ]}-SequentialTaskComponent-Q2LSj{œfieldNameœ:œtaskœ,œidœ:œSequentialTaskComponent-Q2LSjœ,œinputTypesœ:[œSequentialTaskœ],œtypeœ:œotherœ}","className":""},{"source":"SequentialTaskComponent-Q2LSj","sourceHandle":"{œdataTypeœ:œSequentialTaskComponentœ,œidœ:œSequentialTaskComponent-Q2LSjœ,œnameœ:œtask_outputœ,œoutput_typesœ:[œSequentialTaskœ]}","target":"SequentialCrewComponent-BoVzP","targetHandle":"{œfieldNameœ:œtasksœ,œidœ:œSequentialCrewComponent-BoVzPœ,œinputTypesœ:[œSequentialTaskœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tasks","id":"SequentialCrewComponent-BoVzP","inputTypes":["SequentialTask"],"type":"other"},"sourceHandle":{"dataType":"SequentialTaskComponent","id":"SequentialTaskComponent-Q2LSj","name":"task_output","output_types":["SequentialTask"]}},"id":"reactflow__edge-SequentialTaskComponent-Q2LSj{œdataTypeœ:œSequentialTaskComponentœ,œidœ:œSequentialTaskComponent-Q2LSjœ,œnameœ:œtask_outputœ,œoutput_typesœ:[œSequentialTaskœ]}-SequentialCrewComponent-BoVzP{œfieldNameœ:œtasksœ,œidœ:œSequentialCrewComponent-BoVzPœ,œinputTypesœ:[œSequentialTaskœ],œtypeœ:œotherœ}","className":""},{"source":"SerpAPI-2J1pe","sourceHandle":"{œdataTypeœ:œSerpAPIœ,œidœ:œSerpAPI-2J1peœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"CrewAIAgentComponent-oDvyH","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-oDvyHœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"CrewAIAgentComponent-oDvyH","inputTypes":["Tool"],"type":"other"},"sourceHandle":{"dataType":"SerpAPI","id":"SerpAPI-2J1pe","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-SerpAPI-2J1pe{œdataTypeœ:œSerpAPIœ,œidœ:œSerpAPI-2J1peœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIAgentComponent-oDvyH{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-oDvyHœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}","className":""}],"viewport":{"x":-188.84020521869513,"y":-69.01785274586234,"zoom":0.3603346824305295}},"description":"Transform Your Business with Smart Dialogues.","name":"Multi-Agent-Researcher-Blog-Writer","last_tested_version":"1.0.14.post1","endpoint_name":null,"is_component":false}